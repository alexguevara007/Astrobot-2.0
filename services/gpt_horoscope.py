import os
import json
import logging
import random
from datetime import date, timedelta
from services.lunar import get_lunar_text
from services.yandex_gpt import generate_text_with_system
from services.parsed_horoscope import parse_and_translate  # üÜï

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CACHE_FILE = "cache/horoscope_cache.json"
os.makedirs("cache", exist_ok=True)

def load_cache():
    try:
        with open(CACHE_FILE, encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_cache(data):
    try:
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")

def pick_tone():
    return random.choices(
        ["positive", "neutral", "negative"],
        weights=[0.5, 0.25, 0.25],
        k=1
    )[0]

def generate_horoscope(
    sign: str,
    day: str = "today",
    detailed: bool = False,
    hybrid: bool = True,
    use_scraped: bool = False  # ‚úÖ –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
):
    try:
        today = date.today()
        target = today if day == "today" else today + timedelta(days=1)
        date_str = str(target)
        sign = sign.lower()

        cache = load_cache()
        cache_key = f"{'detailed' if detailed else 'brief'}_{sign}_{day}"
        
        if sign in cache and cache_key in cache[sign] and cache[sign][cache_key]["date"] == date_str:
            logger.info(f"–ò–∑ –∫—ç—à–∞: {sign} –Ω–∞ {day}")
            return cache[sign][cache_key]["text"]

        # ‚úÖ –†–µ–∂–∏–º: –ø–∞—Ä—Å–∏–Ω–≥ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ + –ø–µ—Ä–µ–≤–æ–¥
        if use_scraped:
            logger.info(f"üì∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è {sign} –Ω–∞ {day}")
            result_text = parse_and_translate(sign, day)
            if sign not in cache:
                cache[sign] = {}
            cache[sign][cache_key] = {
                "date": date_str,
                "text": result_text,
                "tone": "parsed"
            }
            save_cache(cache)
            return result_text

        # ‚úÖ –†–µ–∂–∏–º: –≥–∏–±—Ä–∏–¥ (GPT + –ª—É–Ω–Ω–∞—è –∏–Ω—Ñ–∞)
        if hybrid:
            from services.gpt_horoscope_hybrid import generate_hybrid_horoscope
            logger.info(f"‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: sign={sign}, day={day}, detailed={detailed}")
            result_text = generate_hybrid_horoscope(sign, day, detailed)

            if sign not in cache:
                cache[sign] = {}
            cache[sign][cache_key] = {
                "date": date_str,
                "text": result_text,
                "tone": "hybrid"
            }
            save_cache(cache)
            return result_text

        # ‚ÑπÔ∏è –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPT
        tone = pick_tone()
        tone_instruction = {
            "positive": "–≤ —Ü–µ–ª–æ–º –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "neutral": "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            "negative": "—Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º, –Ω–µ –¥—Ä–∞–º–∞—Ç–∏–∑–∏—Ä—É—è"
        }

        system_prompt = f"""–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥.
–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî {tone_instruction[tone]}.
–ü–∏—à–∏ —á–µ—Å—Ç–Ω–æ, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏."""

        label = '—Å–µ–≥–æ–¥–Ω—è' if day == 'today' else '–∑–∞–≤—Ç—Ä–∞'

        # üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π prompt
        if detailed:
            user_prompt = f"""–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {label} –¥–ª—è –∑–Ω–∞–∫–∞ {sign.title()}.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –û–±—â–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è
2. –û—Ç–Ω–æ—à–µ–Ω–∏—è
3. –†–∞–±–æ—Ç–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã
4. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
5. –°–æ–≤–µ—Ç
"""
        else:
            user_prompt = f"""–ö—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {label} –¥–ª—è {sign.title()}:
- –û—â—É—â–µ–Ω–∏—è –¥–Ω—è
- –õ–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç
- –ö–æ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è

–ë–µ–∑ –∫–ª–∏—à–µ, –ø–æ-–∂–∏–≤–æ–º—É, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º.
"""

        logger.info(f"üß† –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {sign}, –¥–µ–Ω—å: {day}, —Ç–æ–Ω: {tone}")
        gpt_text = generate_text_with_system(system_prompt, user_prompt)

        # ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if detailed:
            try:
                lunar = get_lunar_text()
                full_text = f"{gpt_text}\n\nüåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n{lunar}"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª—É–Ω—É: {e}")
                full_text = gpt_text
        else:
            full_text = gpt_text

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        if sign not in cache:
            cache[sign] = {}
        cache[sign][cache_key] = {
            "date": date_str,
            "text": full_text,
            "tone": tone
        }
        save_cache(cache)
        return full_text

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def clear_old_cache():
    try:
        cache = load_cache()
        today = str(date.today())

        for sign in list(cache.keys()):
            for key in list(cache[sign].keys()):
                if cache[sign][key]["date"] < today:
                    del cache[sign][key]
            if not cache[sign]:
                del cache[sign]

        save_cache(cache)
        logger.info("üßπ –°—Ç–∞—Ä—ã–π –∫—ç—à –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
