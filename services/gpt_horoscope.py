import os
import json
import logging
import random
from datetime import date, timedelta
from services.lunar import get_lunar_text
from services.yandex_gpt import generate_text_with_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CACHE_FILE = "cache/horoscope_cache.json"
os.makedirs("cache", exist_ok=True)

def load_cache():
    try:
        with open(CACHE_FILE, encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_cache(data):
    try:
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")

def pick_tone():
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é"""
    return random.choices(
        ["positive", "neutral", "negative"],
        weights=[0.5, 0.25, 0.25],
        k=1
    )[0]

def generate_horoscope(sign: str, day: str = "today", detailed: bool = False):
    try:
        today = date.today()
        target = today if day == "today" else today + timedelta(days=1)
        date_str = str(target)
        sign = sign.lower()

        cache = load_cache()
        cache_key = f"{'detailed' if detailed else 'brief'}_{sign}_{day}"

        # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤ –∫—ç—à–µ —É–∂–µ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if sign in cache and cache_key in cache[sign] and cache[sign][cache_key]["date"] == date_str:
            logger.info(f"–ò–∑ –∫—ç—à–∞: {sign} –Ω–∞ {day}")
            return cache[sign][cache_key]["text"]

        # üîÆ –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–Ω –ø—Ä–æ–≥–Ω–æ–∑–∞ (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å)
        tone = pick_tone()

        # üß† –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞
        tone_instruction = {
            "positive": "–≤ —Ü–µ–ª–æ–º –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "neutral": "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            "negative": "—Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º, –Ω–µ –¥—Ä–∞–º–∞—Ç–∏–∑–∏—Ä—É—è"
        }

        system_prompt = f"""–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî {tone_instruction[tone]}. 
–ü–∏—à–∏ –∂–∏–≤–æ, —á–µ—Å—Ç–Ω–æ, –±–µ–∑ –∫–ª–∏—à–µ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –≤—ã–±–æ—Ä—É —á–µ–ª–æ–≤–µ–∫–∞. –ò–∑–±–µ–≥–∞–π –ø—É—Å—Ç—ã—Ö –æ–±–µ—â–∞–Ω–∏–π –∏ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –∑–∞–±–æ—Ç—É."""

        label = '—Å–µ–≥–æ–¥–Ω—è' if day == 'today' else '–∑–∞–≤—Ç—Ä–∞'

        if detailed:
            user_prompt = f"""–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {label} –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {sign.title()}.

–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ —Å—Ç–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {tone_instruction[tone]}.

‚õÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:
1. üåü –û–±—â–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è
2. ‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–µ–º—å—è
3. üíº –†–∞–±–æ—Ç–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã
4. üè• –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
5. üí° –ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è
6. ‚òÄÔ∏è –ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞, —á–∏—Å–ª–∞ –∏ —á–∞—Å—ã
7. üö´ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å
8. üë• –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏
9. üéØ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–Ω—è

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º –∏ –Ω–µ –∫–∞–∫ —Ä–æ–±–æ—Ç."""
        else:
            user_prompt = f"""–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {label} –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {sign.title()}.
–¢–æ–Ω: {tone_instruction[tone]}.

üí° –í–∫–ª—é—á–∏ 3 –ø—É–Ω–∫—Ç–∞:
1. –ì–ª–∞–≤–Ω–æ–µ –æ—â—É—â–µ–Ω–∏–µ –∏ —Ñ–æ–Ω –¥–Ω—è
2. –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç
3. –ö–æ–≥–¥–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö ‚Äî —Å–¥–µ–ª–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ."""

        # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å GPT
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {sign}, {day}, —Ç–æ–Ω: {tone}")
        gpt_text = generate_text_with_system(system_prompt, user_prompt)

        if detailed:
            try:
                lunar = get_lunar_text()
                full_text = f"{gpt_text}\n\nüåô <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n{lunar}"
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
                full_text = gpt_text
        else:
            full_text = gpt_text

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        if sign not in cache:
            cache[sign] = {}
        cache[sign][cache_key] = {
            "date": date_str,
            "text": full_text,
            "tone": tone
        }

        save_cache(cache)
        return full_text

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def clear_old_cache():
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã"""
    try:
        cache = load_cache()
        today = str(date.today())

        for sign in list(cache.keys()):
            for key in list(cache[sign].keys()):
                if cache[sign][key]["date"] < today:
                    del cache[sign][key]
            if not cache[sign]:
                del cache[sign]

        save_cache(cache)
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã —É–¥–∞–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
