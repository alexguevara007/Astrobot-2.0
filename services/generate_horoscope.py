import random
from datetime import date, timedelta
import logging
import requests
from bs4 import BeautifulSoup

from services.yandex_translate import translate_text
from services.yandex_gpt import generate_text_with_system
from services.astro_data import get_lunar_info
from services.astroseek_scraper import get_day_energy_description

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ –∑–Ω–∞–∫–∞ –∏ id –Ω–∞ —Å–∞–π—Ç–µ
SIGN_MAP = {
    'aries': 1, 'taurus': 2, 'gemini': 3, 'cancer': 4,
    'leo': 5, 'virgo': 6, 'libra': 7, 'scorpio': 8,
    'sagittarius': 9, 'capricorn': 10, 'aquarius': 11, 'pisces': 12
}

# –°—Ç–∏–ª–µ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∫–∏
REPHRASE_TONES = [
    "–ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏ –∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –±–µ–∑ –ø–∞—Ñ–æ—Å–∞",
    "–∞–Ω–∞–ª–∏–∑–∏—Ä—É—è, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –∫–æ—É—á –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥",
    "—á–µ–ª–æ–≤–µ—á–Ω–æ, —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º",
    "—Å –ª—ë–≥–∫–∏–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–º —Ç–æ–Ω–æ–º –∏ –æ–±—Ä–∞–∑–∞–º–∏",
    "–≤ —Å–ø–æ–∫–æ–π–Ω–æ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ, –∫–∞–∫ –∑—Ä–µ–ª—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π
START_INTROS = [
    "üîÆ –°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ:",
    "üåå –ì–ª–∞–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –∑–≤—ë–∑–¥:",
    "üí´ –û–±—â–∏–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –¥–Ω—è:",
    "ü™ê –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –ø—É—Ç—å:",
    "‚ú® –ù–µ–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç:"
]


def fetch_horoscope_from_site(sign: str, day: str = "today") -> str:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Å–∞–π—Ç–∞ horoscope.com"""
    sign_id = SIGN_MAP.get(sign.lower())
    if not sign_id:
        return "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"

    url = f"https://www.horoscope.com/us/horoscopes/general/horoscope-general-daily-{day}.aspx?sign={sign_id}"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        box = soup.find("div", class_="main-horoscope")
        p = box.find("p")
        text = p.get_text(strip=True)
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø: {e}"


def generate_horoscope(sign: str, day: str = "today", detailed: bool = False) -> str:
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞:
    - –ø–∞—Ä—Å–∏–º –≥–æ—Ä–æ—Å–∫–æ–ø
    - –ø–µ—Ä–µ–≤–æ–¥–∏–º
    - –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT
    - –¥–æ–±–∞–≤–ª—è–µ–º –ª—É–Ω–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        original_text_en = fetch_horoscope_from_site(sign, day)
        if original_text_en.startswith("‚ö†Ô∏è") or original_text_en.startswith("üö´"):
            return original_text_en

        # 2. –ü–µ—Ä–µ–≤–æ–¥
        translated_text = translate_text(original_text_en, target_lang="ru")

        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –õ—É–Ω–∞ –∏ —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è
        target_date = date.today() if day == "today" else date.today() + timedelta(days=1)
        lunar_info = get_lunar_info(target_date)
        energy = get_day_energy_description()

        moon_context = f"–õ—É–Ω–∞ –≤ {lunar_info['moon_sign']}, —Ñ–∞–∑–∞: {lunar_info['phase_text']}, {lunar_info['moon_phase']}%"
        energy_context = f"–≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è: {energy or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}"

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–ª—è –∏ –∏–Ω—Ç—Ä–æ
        tone = random.choice(REPHRASE_TONES)
        intro = random.choice(START_INTROS)

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º promt
        system_prompt = (
            "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–ü–∏—à–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É: –∏—Å–∫—Ä–µ–Ω–Ω–µ, –±–µ–∑ –∫–ª–∏—à–µ, –±–µ–∑ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏. "
            "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º, —á–µ–ª–æ–≤–µ—á–Ω—ã–º –∏ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–º."
        )

        user_prompt = f"""
–í–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:

\"\"\"{translated_text}\"\"\"

–ü–µ—Ä–µ–ø–∏—à–∏ –µ–≥–æ –≤ —Å—Ç–∏–ª–µ ‚Äî {tone}.
–ò–∑–±–µ–≥–∞–π —à—Ç–∞–º–ø–æ–≤ –∏ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ü–∏—à–∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –±—É–¥—Ç–æ –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ –æ–¥–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.
–£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–Ω—è:

- {moon_context}
- {energy_context}
"""

        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º temperature [0.9, 1.0]
        temperature = random.uniform(0.9, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ 1.0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ 400 –≤ Yandex GPT
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è GPT —Å temperature={temperature:.2f}")

        try:
            gpt_response = generate_text_with_system(
                system_prompt=system_prompt,
                user_prompt=user_prompt.strip(),
                temperature=temperature,  # –£–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ
                max_tokens=1000 if detailed else 500  # –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–ª–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç detailed
            )
            if not gpt_response:  # –ï—Å–ª–∏ GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (fallback)
                raise ValueError("GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            final_text = f"{intro}\n\n{gpt_response.strip()}"
        except Exception as e:
            logger.warning(f"GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥. {e}")
            final_text = f"{intro}\n\n{translated_text.strip()}"

        return final_text

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
