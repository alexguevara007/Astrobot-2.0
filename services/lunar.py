import ephem
import logging
import json
import os
from datetime import datetime
import pytz
import asyncio  # –î–ª—è async

from services.locales import get_text  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –∫—ç—à—É (–∏–∑ —Ç–≤–æ–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
LUNAR_CACHE_FILE = "cache/lunar_cache.json"
CACHE_TTL = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ñ–∞–∑ (–ø–æ —è–∑—ã–∫–∞–º)
PHASE_MAP = {
    'ru': {
        (0, 0.05): ("–ù–æ–≤–æ–ª—É–Ω–∏–µ", "üåë"),
        (0.05, 0.25): ("–†–∞—Å—Ç—É—â–∏–π –º–µ—Å—è—Ü", "üåí"),
        (0.25, 0.35): ("–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "üåì"),
        (0.35, 0.45): ("–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "üåî"),
        (0.45, 0.55): ("–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "üåï"),
        (0.55, 0.65): ("–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "üåñ"),
        (0.65, 0.75): ("–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "üåó"),
        (0.75, 1.0): ("–£–±—ã–≤–∞—é—â–∏–π –º–µ—Å—è—Ü", "üåò"),
        (0.95, 1.0): ("–ù–æ–≤–æ–ª—É–Ω–∏–µ", "üåë"),  # –î–ª—è phase >0.95
    },
    'en': {
        (0, 0.05): ("New Moon", "üåë"),
        (0.05, 0.25): ("Waxing Crescent", "üåí"),
        (0.25, 0.35): ("First Quarter", "üåì"),
        (0.35, 0.45): ("Waxing Gibbous", "üåî"),
        (0.45, 0.55): ("Full Moon", "üåï"),
        (0.55, 0.65): ("Waning Gibbous", "üåñ"),
        (0.65, 0.75): ("Last Quarter", "üåó"),
        (0.75, 1.0): ("Waning Crescent", "üåò"),
        (0.95, 1.0): ("New Moon", "üåë"),
    }
}

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ (–ø–æ —è–∑—ã–∫–∞–º)
ZODIAC_MAP = {
    'ru': {
        'Aries': '‚ôàÔ∏è –û–≤–µ–Ω',
        'Taurus': '‚ôâÔ∏è –¢–µ–ª–µ—Ü',
        'Gemini': '‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã',
        'Cancer': '‚ôãÔ∏è –†–∞–∫',
        'Leo': '‚ôåÔ∏è –õ–µ–≤',
        'Virgo': '‚ôçÔ∏è –î–µ–≤–∞',
        'Libra': '‚ôéÔ∏è –í–µ—Å—ã',
        'Scorpius': '‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω',
        'Sagittarius': '‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü',
        'Capricornus': '‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥',
        'Aquarius': '‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π',
        'Pisces': '‚ôìÔ∏è –†—ã–±—ã'
    },
    'en': {
        'Aries': '‚ôàÔ∏è Aries',
        'Taurus': '‚ôâÔ∏è Taurus',
        'Gemini': '‚ôäÔ∏è Gemini',
        'Cancer': '‚ôãÔ∏è Cancer',
        'Leo': '‚ôåÔ∏è Leo',
        'Virgo': '‚ôçÔ∏è Virgo',
        'Libra': '‚ôéÔ∏è Libra',
        'Scorpius': '‚ôèÔ∏è Scorpio',
        'Sagittarius': '‚ôêÔ∏è Sagittarius',
        'Capricornus': '‚ôëÔ∏è Capricorn',
        'Aquarius': '‚ôíÔ∏è Aquarius',
        'Pisces': '‚ôìÔ∏è Pisces'
    }
}

def load_cache() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(LUNAR_CACHE_FILE):
        with open(LUNAR_CACHE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_cache(data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª"""
    os.makedirs(os.path.dirname(LUNAR_CACHE_FILE), exist_ok=True)
    with open(LUNAR_CACHE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

async def get_lunar_text(lang: str = 'ru', timezone: str = 'Europe/Moscow') -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∑–µ –ª—É–Ω—ã (async, —Å –∫—ç—à–µ–º –∏ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å—é)"""
    cache = load_cache()
    cache_key = f"{lang}_{timezone}"
    now_timestamp = datetime.now().timestamp()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key in cache and (now_timestamp - cache.get(cache_key + '_timestamp', 0)) < CACHE_TTL:
        logger.info(f"üìÇ Lunar data loaded from cache for {lang}")
        return cache[cache_key]

    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        moon = ephem.Moon()
        now = ephem.now()
        moon.compute(now)
        phase = moon.phase / 100.0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –∏ —ç–º–æ–¥–∑–∏ (–∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ lang)
        phase_map = PHASE_MAP.get(lang, PHASE_MAP['ru'])  # Fallback –Ω–∞ ru
        phase_name, emoji = next((name, em) for (low, high), (name, em) in phase_map.items() if low <= phase < high)

        # –†–æ—Å—Ç/—É–±—ã–≤–∞–Ω–∏–µ
        is_growing = phase < 0.5
        growth = get_text('moon_growing' if is_growing else 'moon_waning', lang)

        # –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ lang)
        moon_sign = ephem.constellation(moon)[1]
        zodiac_map = ZODIAC_MAP.get(lang, ZODIAC_MAP['ru'])
        moon_zodiac = zodiac_map.get(moon_sign, moon_sign)

        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = int(moon.earth_distance * 149597870.7)  # AU to km

        # –í—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º TZ
        tz = pytz.timezone(timezone)
        current_time = datetime.now(tz).strftime("%d.%m.%Y %H:%M")
        tz_short = tz.zone.split('/')[-1]  # e.g., 'Moscow'

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ get_text
        text = get_text('lunar_calendar', lang).format(
            emoji=emoji,
            phase_name=phase_name,
            illumination=round(moon.phase, 1),
            moon_zodiac=moon_zodiac,
            growth=growth,
            distance=distance,
            time=current_time,
            tz=tz_short
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache[cache_key] = text
        cache[cache_key + '_timestamp'] = now_timestamp
        save_cache(cache)
        logger.info(f"‚úÖ Lunar data calculated and cached for {lang}")

        return text

    except Exception as e:
        logger.error(f"‚ùå Error getting lunar data: {e}", exc_info=True)
        return get_text('lunar_error', lang)

if __name__ == "__main__":
    async def test():
        print(await get_lunar_text(lang='ru'))
        print(await get_lunar_text(lang='en'))  # –¢–µ—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º

    asyncio.run(test())
