import logging
from datetime import datetime
import pytz
from skyfield.api import load, Topos
from skyfield.almanac import moon_phase
from typing import Dict, Any

logger = logging.getLogger(__name__)

class LunarCalendar:
    def __init__(self):
        self.ts = load.timescale()
        self.eph = load('de421.bsp')
        self.earth = self.eph['earth']
        self.moon = self.eph['moon']
        self.sun = self.eph['sun']

    def get_moon_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—É–Ω–µ"""
        try:
            now = self.ts.now()
            
            # –§–∞–∑–∞ –ª—É–Ω—ã (0-1)
            phase = moon_phase(self.eph, now)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã
            phase_info = self._get_phase_name(phase)
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ª—É–Ω—ã
            moon_distance = self._calculate_moon_distance(now)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
            zodiac_sign = self._get_moon_zodiac(now)
            
            return {
                "phase": phase_info["name"],
                "emoji": phase_info["emoji"],
                "illumination": phase * 100,
                "distance": moon_distance,
                "zodiac": zodiac_sign,
                "growing": phase < 0.5,
                "timestamp": datetime.now(pytz.UTC)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª—É–Ω–µ: {e}")
            raise

    def _get_phase_name(self, phase: float) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏ —Ñ–∞–∑—ã –ª—É–Ω—ã"""
        if 0 <= phase < 0.05 or phase > 0.95:
            return {"name": "–ù–æ–≤–æ–ª—É–Ω–∏–µ", "emoji": "üåë"}
        elif 0.05 <= phase < 0.25:
            return {"name": "–†–∞—Å—Ç—É—â–∏–π –º–µ—Å—è—Ü", "emoji": "üåí"}
        elif 0.25 <= phase < 0.35:
            return {"name": "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "emoji": "üåì"}
        elif 0.35 <= phase < 0.45:
            return {"name": "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "emoji": "üåî"}
        elif 0.45 <= phase < 0.55:
            return {"name": "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "emoji": "üåï"}
        elif 0.55 <= phase < 0.65:
            return {"name": "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "emoji": "üåñ"}
        elif 0.65 <= phase < 0.75:
            return {"name": "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "emoji": "üåó"}
        else:
            return {"name": "–£–±—ã–≤–∞—é—â–∏–π –º–µ—Å—è—Ü", "emoji": "üåò"}

    def _calculate_moon_distance(self, time) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ª—É–Ω—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö"""
        moon_pos = self.moon.at(time)
        earth_pos = self.earth.at(time)
        distance = moon_pos - earth_pos
        return distance.km

    def _get_moon_zodiac(self, time) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –ª—É–Ω—ã"""
        moon_pos = self.moon.at(time)
        ecliptic = moon_pos.ecliptic_latlon()
        lon = ecliptic[1].degrees
        
        zodiac_signs = [
            "‚ôàÔ∏è –û–≤–µ–Ω", "‚ôâÔ∏è –¢–µ–ª–µ—Ü", "‚ôäÔ∏è –ë–ª–∏–∑–Ω–µ—Ü—ã", "‚ôãÔ∏è –†–∞–∫",
            "‚ôåÔ∏è –õ–µ–≤", "‚ôçÔ∏è –î–µ–≤–∞", "‚ôéÔ∏è –í–µ—Å—ã", "‚ôèÔ∏è –°–∫–æ—Ä–ø–∏–æ–Ω",
            "‚ôêÔ∏è –°—Ç—Ä–µ–ª–µ—Ü", "‚ôëÔ∏è –ö–æ–∑–µ—Ä–æ–≥", "‚ôíÔ∏è –í–æ–¥–æ–ª–µ–π", "‚ôìÔ∏è –†—ã–±—ã"
        ]
        
        sign_index = int(lon / 30) % 12
        return zodiac_signs[sign_index]

def get_lunar_text() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—É–Ω–µ"""
    try:
        calendar = LunarCalendar()
        moon_info = calendar.get_moon_info()
        
        moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y %H:%M")
        
        return (
            f"{moon_info['emoji']} –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n\n"
            f"–§–∞–∑–∞: {moon_info['phase']}\n"
            f"–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: {moon_info['illumination']:.1f}%\n"
            f"–õ—É–Ω–∞ –≤ –∑–Ω–∞–∫–µ: {moon_info['zodiac']}\n"
            f"–õ—É–Ω–∞ {'—Ä–∞—Å—Ç—É—â–∞—è' if moon_info['growing'] else '—É–±—ã–≤–∞—é—â–∞—è'}\n"
            f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {moon_info['distance']:,.0f} –∫–º\n\n"
            f"–í—Ä–µ–º—è: {moscow_time} (–ú–°–ö)"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ"

if __name__ == "__main__":
    print(get_lunar_text())
