from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import json
import os
import copy

from keyboards import get_back_to_menu_inline


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–∑ JSON
with open("data/compatibility.json", encoding="utf-8") as f:
    COMPATIBILITY_DATA = json.load(f)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
for sign1 in list(COMPATIBILITY_DATA.keys()):
    for sign2 in COMPATIBILITY_DATA[sign1]:
        if sign2 not in COMPATIBILITY_DATA:
            COMPATIBILITY_DATA[sign2] = {}
        if sign1 not in COMPATIBILITY_DATA[sign2]:
            COMPATIBILITY_DATA[sign2][sign1] = copy.deepcopy(COMPATIBILITY_DATA[sign1][sign2])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
def get_sign_selection_keyboard(step: str = "first"):
    signs = [
        ["–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã"],
        ["–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞"],
        ["–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü"],
        ["–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"]
    ]

    keyboard = []
    for row in signs:
        keyboard_row = [
            InlineKeyboardButton(
                sign, callback_data=f"compatibility_{step}:{sign.lower()}"
            ) for sign in row
        ]
        keyboard.append(keyboard_row)

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_compatibility_text(sign1: str, sign2: str) -> str:
    try:
        compatibility = COMPATIBILITY_DATA[sign1.lower()][sign2.lower()]
        return (
            f"<b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {sign1.title()} + {sign2.title()}</b>\n\n"
            f"‚ú® <b>–û–±—â–∞—è:</b> {compatibility['general']}\n"
            f"‚ù§Ô∏è <b>–õ—é–±–æ–≤—å:</b> {compatibility['love']}\n"
            f"üë´ <b>–î—Ä—É–∂–±–∞:</b> {compatibility['friendship']}\n"
            f"üíº <b>–†–∞–±–æ—Ç–∞:</b> {compatibility['work']}\n\n"
            f"<i>{compatibility['description']}</i>"
        )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def compatibility(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not hasattr(context, 'user_data'):
            context.user_data = {}

        if update.callback_query:
            query = update.callback_query
            data = query.data

            if data == "compatibility":
                await query.message.edit_text(
                    "‚ù§Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                    reply_markup=get_sign_selection_keyboard("first")
                )

            elif data.startswith("compatibility_first:"):
                sign = data.split(":")[1]
                context.user_data['first_sign'] = sign

                await query.message.edit_text(
                    f"–ü–µ—Ä–≤—ã–π –∑–Ω–∞–∫: <b>{sign.title()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –∑–Ω–∞–∫:",
                    reply_markup=get_sign_selection_keyboard("second"),
                    parse_mode="HTML"
                )

            elif data.startswith("compatibility_second:"):
                second_sign = data.split(":")[1]
                first_sign = context.user_data.get('first_sign')

                if not first_sign:
                    await query.message.edit_text(
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫.",
                        reply_markup=get_back_to_menu_inline()
                    )
                    return

                result = get_compatibility_text(first_sign, second_sign)

                await query.message.edit_text(
                    result,
                    reply_markup=get_back_to_menu_inline(),
                    parse_mode="HTML"
                )

                context.user_data.pop("first_sign", None)

        else:
            await update.message.reply_text(
                "‚ù§Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_sign_selection_keyboard("first")
            )

    except Exception as e:
        error_message = f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_message)
        if update.callback_query:
            await update.callback_query.message.edit_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )