from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging
from services.lunar import get_lunar_text
from keyboards import get_back_to_menu_inline

logger = logging.getLogger(__name__)

async def moon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ª—É–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = "üîÆ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ..."
        if update.callback_query:
            message = await update.callback_query.message.edit_text(
                text=loading_message,
                parse_mode="Markdown"
            )
            await update.callback_query.answer()
        else:
            message = await update.message.reply_text(
                text=loading_message,
                parse_mode="Markdown"
            )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É–Ω–µ
        lunar_info = get_lunar_text()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            "üåô *–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å*\n\n"
            f"{lunar_info}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            await message.edit_text(
                text=response,
                parse_mode="Markdown",
                reply_markup=get_back_to_menu_inline()
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass
            else:
                raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ moon: {e}")
        error_message = (
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        try:
            if update.callback_query:
                await update.callback_query.message.edit_text(
                    text=error_message,
                    parse_mode="Markdown",
                    reply_markup=get_back_to_menu_inline()
                )
            else:
                await update.message.reply_text(
                    text=error_message,
                    parse_mode="Markdown",
                    reply_markup=get_back_to_menu_inline()
                )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
