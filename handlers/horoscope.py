from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging
import time
from datetime import datetime
from services.gpt_horoscope import generate_horoscope
from keyboards import get_zodiac_inline_keyboard, get_back_to_menu_inline

logger = logging.getLogger(__name__)

# –ö–∞—Ä—Ç–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç–∏—Ö–∏–π
ZODIAC_SIGNS = {
    "–æ–≤–µ–Ω": {
        "eng": "aries",
        "emoji": "‚ôàÔ∏è",
        "element": "üî• –û–≥–æ–Ω—å",
        "planet": "‚ôÇÔ∏è –ú–∞—Ä—Å"
    },
    "—Ç–µ–ª–µ—Ü": {
        "eng": "taurus",
        "emoji": "‚ôâÔ∏è",
        "element": "üåç –ó–µ–º–ª—è",
        "planet": "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞"
    },
    "–±–ª–∏–∑–Ω–µ—Ü—ã": {
        "eng": "gemini",
        "emoji": "‚ôäÔ∏è",
        "element": "üí® –í–æ–∑–¥—É—Ö",
        "planet": "‚òø –ú–µ—Ä–∫—É—Ä–∏–π"
    },
    "—Ä–∞–∫": {
        "eng": "cancer",
        "emoji": "‚ôãÔ∏è",
        "element": "üíß –í–æ–¥–∞",
        "planet": "üåô –õ—É–Ω–∞"
    },
    "–ª–µ–≤": {
        "eng": "leo",
        "emoji": "‚ôåÔ∏è",
        "element": "üî• –û–≥–æ–Ω—å",
        "planet": "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ"
    },
    "–¥–µ–≤–∞": {
        "eng": "virgo",
        "emoji": "‚ôçÔ∏è",
        "element": "üåç –ó–µ–º–ª—è",
        "planet": "‚òø –ú–µ—Ä–∫—É—Ä–∏–π"
    },
    "–≤–µ—Å—ã": {
        "eng": "libra",
        "emoji": "‚ôéÔ∏è",
        "element": "üí® –í–æ–∑–¥—É—Ö",
        "planet": "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞"
    },
    "—Å–∫–æ—Ä–ø–∏–æ–Ω": {
        "eng": "scorpio",
        "emoji": "‚ôèÔ∏è",
        "element": "üíß –í–æ–¥–∞",
        "planet": "‚ôá –ü–ª—É—Ç–æ–Ω"
    },
    "—Å—Ç—Ä–µ–ª–µ—Ü": {
        "eng": "sagittarius",
        "emoji": "‚ôêÔ∏è",
        "element": "üî• –û–≥–æ–Ω—å",
        "planet": "‚ôÉ –Æ–ø–∏—Ç–µ—Ä"
    },
    "–∫–æ–∑–µ—Ä–æ–≥": {
        "eng": "capricorn",
        "emoji": "‚ôëÔ∏è",
        "element": "üåç –ó–µ–º–ª—è",
        "planet": "‚ôÑ –°–∞—Ç—É—Ä–Ω"
    },
    "–≤–æ–¥–æ–ª–µ–π": {
        "eng": "aquarius",
        "emoji": "‚ôíÔ∏è",
        "element": "üí® –í–æ–∑–¥—É—Ö",
        "planet": "‚õ¢ –£—Ä–∞–Ω"
    },
    "—Ä—ã–±—ã": {
        "eng": "pisces",
        "emoji": "‚ôìÔ∏è",
        "element": "üíß –í–æ–¥–∞",
        "planet": "‚ôÜ –ù–µ–ø—Ç—É–Ω"
    }
}

def get_horoscope_actions_keyboard(sign: str, day: str, detailed: bool = False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    buttons = []
    
    if not detailed:
        buttons.append([
            InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"horoscope:{sign}:{day}:true"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"horoscope:{sign}:{day}:false")
        ])
    
    buttons.extend([
        [InlineKeyboardButton("üîÆ –î—Ä—É–≥–æ–π –∑–Ω–∞–∫", callback_data=f"horoscope_menu:{day}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(buttons)

async def send_horoscope(update_or_query, sign: str, day: str, detailed: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–∫–∞
        sign_lower = sign.lower()
        if sign_lower not in ZODIAC_SIGNS:
            text = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(
                    text,
                    reply_markup=get_zodiac_inline_keyboard("horoscope")
                )
            else:
                await update_or_query.edit_message_text(
                    text,
                    reply_markup=get_zodiac_inline_keyboard("horoscope")
                )
            return

        sign_info = ZODIAC_SIGNS[sign_lower]
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–Ω–∞–∫–µ
        loading_text = (
            f"{sign_info['emoji']} –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign.title()}\n"
            f"–°—Ç–∏—Ö–∏—è: {sign_info['element']}\n"
            f"–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sign_info['planet']}\n\n"
            "‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ö–æ—Å—Ç–∏–Ω–≥–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        if hasattr(update_or_query, 'message'):
            message = await update_or_query.message.reply_text(loading_text)
        else:
            message = await update_or_query.edit_message_text(loading_text)

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
        try:
            start_time = time.time()
            horoscope_text = generate_horoscope(sign_info['eng'], day=day, detailed=detailed)
            generation_time = time.time() - start_time
            logger.info(f"–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign}: {generation_time:.2f} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
            error_text = (
                f"{sign_info['emoji']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            )
            await message.edit_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        day_text = "—Å–µ–≥–æ–¥–Ω—è" if day == "today" else "–∑–∞–≤—Ç—Ä–∞"
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        header = (
            f"{sign_info['emoji']} {sign.title()}\n"
            f"–°—Ç–∏—Ö–∏—è: {sign_info['element']}\n"
            f"–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sign_info['planet']}\n"
            f"{'–ü–æ–¥—Ä–æ–±–Ω—ã–π' if detailed else '–ö—Ä–∞—Ç–∫–∏–π'} –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {day_text} ({current_date})\n"
            f"{'_' * 30}\n\n"
        )
        
        response = header + horoscope_text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            await message.edit_text(
                text=response,
                reply_markup=get_horoscope_actions_keyboard(sign, day, detailed)
            )
        except BadRequest as e:
            if "Message is too long" in str(e):
                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await message.edit_text(part)
                    else:
                        await message.reply_text(part)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                await message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_horoscope_actions_keyboard(sign, day, detailed)
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
        try:
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(
                    error_text,
                    reply_markup=get_back_to_menu_inline()
                )
            else:
                await update_or_query.edit_message_text(
                    error_text,
                    reply_markup=get_back_to_menu_inline()
                )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

async def horoscope_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope")
            )
        else:
            await update.message.reply_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope")
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ horoscope_today: {e}")
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        if update.callback_query:
            await update.callback_query.message.reply_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update.message.reply_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )

async def horoscope_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
            )
        else:
            await update.message.reply_text(
                "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ horoscope_tomorrow: {e}")
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        if update.callback_query:
            await update.callback_query.message.reply_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update.message.reply_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )

async def handle_zodiac_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()
        data = query.data

        if ":" not in data:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )
            return

        parts = data.split(":")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞
        if parts[0] == "horoscope_menu":
            day = parts[1] if len(parts) > 1 else "today"
            await query.message.edit_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard(f"horoscope{'_tomorrow' if day == 'tomorrow' else ''}")
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞
        if len(parts) == 4:  # horoscope:sign:day:detailed
            prefix, sign, day, detailed = parts
            detailed = detailed.lower() == "true"
        else:
            prefix, sign = parts
            day = "today"
            detailed = False

        if prefix == "horoscope":
            await send_horoscope(query, sign, day, detailed)
        elif prefix == "horoscope_tomorrow":
            await send_horoscope(query, sign, "tomorrow", detailed)
        else:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_zodiac_callback: {e}")
        error_text = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        try:
            await update.callback_query.message.edit_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )
        except:
            await update.callback_query.message.reply_text(
                error_text,
                reply_markup=get_back_to_menu_inline()
            )
