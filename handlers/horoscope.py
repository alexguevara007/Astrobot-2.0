from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging
from services.gpt_horoscope import generate_horoscope
from keyboards import get_zodiac_inline_keyboard, get_back_to_menu_inline

logger = logging.getLogger(__name__)

# –ö–∞—Ä—Ç–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ —Å —ç–º–æ–¥–∑–∏
ZODIAC_SIGNS = {
    "–æ–≤–µ–Ω": ("aries", "‚ôàÔ∏è"),
    "—Ç–µ–ª–µ—Ü": ("taurus", "‚ôâÔ∏è"),
    "–±–ª–∏–∑–Ω–µ—Ü—ã": ("gemini", "‚ôäÔ∏è"),
    "—Ä–∞–∫": ("cancer", "‚ôãÔ∏è"),
    "–ª–µ–≤": ("leo", "‚ôåÔ∏è"),
    "–¥–µ–≤–∞": ("virgo", "‚ôçÔ∏è"),
    "–≤–µ—Å—ã": ("libra", "‚ôéÔ∏è"),
    "—Å–∫–æ—Ä–ø–∏–æ–Ω": ("scorpio", "‚ôèÔ∏è"),
    "—Å—Ç—Ä–µ–ª–µ—Ü": ("sagittarius", "‚ôêÔ∏è"),
    "–∫–æ–∑–µ—Ä–æ–≥": ("capricorn", "‚ôëÔ∏è"),
    "–≤–æ–¥–æ–ª–µ–π": ("aquarius", "‚ôíÔ∏è"),
    "—Ä—ã–±—ã": ("pisces", "‚ôìÔ∏è")
}

# –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
def get_horoscope_actions_keyboard(sign: str, day: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"horoscope:{sign}:{day}:true"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"horoscope:{sign}:{day}:false")
        ],
        [InlineKeyboardButton("üîÆ –î—Ä—É–≥–æ–π –∑–Ω–∞–∫", callback_data=f"horoscope_menu:{day}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

async def send_horoscope(update_or_query, sign: str, day: str, detailed: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–∫–∞
        sign_lower = sign.lower()
        if sign_lower not in ZODIAC_SIGNS:
            text = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(
                    text,
                    reply_markup=get_zodiac_inline_keyboard("horoscope")
                )
            else:
                await update_or_query.edit_message_text(
                    text,
                    reply_markup=get_zodiac_inline_keyboard("horoscope")
                )
            return

        sign_eng, sign_emoji = ZODIAC_SIGNS[sign_lower]
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        loading_text = f"üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign_emoji} {sign.title()}..."
        if hasattr(update_or_query, 'message'):
            message = await update_or_query.message.reply_text(loading_text)
        else:
            message = await update_or_query.edit_message_text(loading_text)

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
        try:
            horoscope_text = generate_horoscope(sign_eng, day=day, detailed=detailed)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
            await message.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_menu_inline()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        day_text = "—Å–µ–≥–æ–¥–Ω—è" if day == "today" else "–∑–∞–≤—Ç—Ä–∞"
        response = f"{sign_emoji} {'–ü–æ–¥—Ä–æ–±–Ω—ã–π' if detailed else '–ö—Ä–∞—Ç–∫–∏–π'} –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign.title()} –Ω–∞ {day_text}:\n\n{horoscope_text}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = get_horoscope_actions_keyboard(sign, day) if not detailed else InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÆ –î—Ä—É–≥–æ–π –∑–Ω–∞–∫", callback_data=f"horoscope_menu:{day}")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            await message.edit_text(
                text=response,
                reply_markup=keyboard
            )
        except BadRequest as e:
            if "Message is too long" in str(e):
                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await message.edit_text(part)
                    else:
                        await message.reply_text(part)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                await message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
            else:
                raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if hasattr(update_or_query, 'message'):
            await update_or_query.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update_or_query.edit_message_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )

async def horoscope_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope")
            )
        else:
            await update.message.reply_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope")
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ horoscope_today: {e}")
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )

async def horoscope_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
            )
        else:
            await update.message.reply_text(
                "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ horoscope_tomorrow: {e}")
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )

async def handle_zodiac_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()
        data = query.data

        if ":" not in data:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )
            return

        parts = data.split(":")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞
        if parts[0] == "horoscope_menu":
            day = parts[1] if len(parts) > 1 else "today"
            await query.message.edit_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard(f"horoscope{'_tomorrow' if day == 'tomorrow' else ''}")
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞
        if len(parts) == 4:  # horoscope:sign:day:detailed
            prefix, sign, day, detailed = parts
            detailed = detailed.lower() == "true"
        else:
            prefix, sign = parts
            day = "today"
            detailed = False

        if prefix == "horoscope":
            await send_horoscope(query, sign, day, detailed)
        elif prefix == "horoscope_tomorrow":
            await send_horoscope(query, sign, "tomorrow", detailed)
        else:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_zodiac_callback: {e}")
        try:
            await update.callback_query.message.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_menu_inline()
            )
        except:
            await update.callback_query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_to_menu_inline()
            )
