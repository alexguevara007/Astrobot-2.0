from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging
import time
from datetime import datetime

from services.generate_horoscope import generate_horoscope  # ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
from keyboards import get_zodiac_inline_keyboard, get_back_to_menu_inline

logger = logging.getLogger(__name__)

# –ö–∞—Ä—Ç–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
ZODIAC_SIGNS = {
    "–æ–≤–µ–Ω":      {"eng": "aries",       "emoji": "‚ôàÔ∏è", "element": "üî• –û–≥–æ–Ω—å",    "planet": "‚ôÇÔ∏è –ú–∞—Ä—Å"},
    "—Ç–µ–ª–µ—Ü":     {"eng": "taurus",      "emoji": "‚ôâÔ∏è", "element": "üåç –ó–µ–º–ª—è",    "planet": "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞"},
    "–±–ª–∏–∑–Ω–µ—Ü—ã":  {"eng": "gemini",      "emoji": "‚ôäÔ∏è", "element": "üí® –í–æ–∑–¥—É—Ö",   "planet": "‚òø –ú–µ—Ä–∫—É—Ä–∏–π"},
    "—Ä–∞–∫":       {"eng": "cancer",      "emoji": "‚ôãÔ∏è", "element": "üíß –í–æ–¥–∞",     "planet": "üåô –õ—É–Ω–∞"},
    "–ª–µ–≤":       {"eng": "leo",         "emoji": "‚ôåÔ∏è", "element": "üî• –û–≥–æ–Ω—å",    "planet": "‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ"},
    "–¥–µ–≤–∞":      {"eng": "virgo",       "emoji": "‚ôçÔ∏è", "element": "üåç –ó–µ–º–ª—è",    "planet": "‚òø –ú–µ—Ä–∫—É—Ä–∏–π"},
    "–≤–µ—Å—ã":      {"eng": "libra",       "emoji": "‚ôéÔ∏è", "element": "üí® –í–æ–∑–¥—É—Ö",   "planet": "‚ôÄÔ∏è –í–µ–Ω–µ—Ä–∞"},
    "—Å–∫–æ—Ä–ø–∏–æ–Ω":  {"eng": "scorpio",     "emoji": "‚ôèÔ∏è", "element": "üíß –í–æ–¥–∞",     "planet": "‚ôá –ü–ª—É—Ç–æ–Ω"},
    "—Å—Ç—Ä–µ–ª–µ—Ü":   {"eng": "sagittarius", "emoji": "‚ôêÔ∏è", "element": "üî• –û–≥–æ–Ω—å",    "planet": "‚ôÉ –Æ–ø–∏—Ç–µ—Ä"},
    "–∫–æ–∑–µ—Ä–æ–≥":   {"eng": "capricorn",   "emoji": "‚ôëÔ∏è", "element": "üåç –ó–µ–º–ª—è",    "planet": "‚ôÑ –°–∞—Ç—É—Ä–Ω"},
    "–≤–æ–¥–æ–ª–µ–π":   {"eng": "aquarius",    "emoji": "‚ôíÔ∏è", "element": "üí® –í–æ–∑–¥—É—Ö",   "planet": "‚õ¢ –£—Ä–∞–Ω"},
    "—Ä—ã–±—ã":      {"eng": "pisces",      "emoji": "‚ôìÔ∏è", "element": "üíß –í–æ–¥–∞",     "planet": "‚ôÜ –ù–µ–ø—Ç—É–Ω"}
}


def get_horoscope_actions_keyboard(sign: str, day: str, detailed: bool = False):
    buttons = []

    if not detailed:
        buttons.append([
            InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"horoscope:{sign}:{day}:true")
        ])

    buttons.extend([
        [InlineKeyboardButton("üîÆ –î—Ä—É–≥–æ–π –∑–Ω–∞–∫", callback_data=f"horoscope_menu:{day}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(buttons)


async def send_horoscope(update_or_query, sign: str, day: str, detailed: bool = False):
    sign_lower = sign.lower()

    if sign_lower not in ZODIAC_SIGNS:
        text = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        reply_markup = get_zodiac_inline_keyboard("horoscope")
        if hasattr(update_or_query, 'message'):
            await update_or_query.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update_or_query.edit_message_text(text, reply_markup=reply_markup)
        return

    sign_info = ZODIAC_SIGNS[sign_lower]

    loading_text = (
        f"{sign_info['emoji']} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign.title()}\n"
        f"–°—Ç–∏—Ö–∏—è: {sign_info['element']}\n"
        f"–£–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sign_info['planet']}\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    if hasattr(update_or_query, 'message'):
        message = await update_or_query.message.reply_text(loading_text)
    else:
        message = await update_or_query.edit_message_text(loading_text)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    try:
        start_time = time.time()
        horoscope_text = generate_horoscope(sign_info["eng"], day=day, detailed=detailed)
        duration = time.time() - start_time
        logger.info(f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {duration:.2f} —Å–µ–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {e}")
        await message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_inline()
        )
        return

    day_text = "—Å–µ–≥–æ–¥–Ω—è" if day == "today" else "–∑–∞–≤—Ç—Ä–∞"
    current_date = datetime.now().strftime("%d.%m.%Y")

    header = (
        f"{sign_info['emoji']} <b>{sign.title()}</b>\n"
        f"–°—Ç–∏—Ö–∏—è: {sign_info['element']}\n"
        f"–ü–ª–∞–Ω–µ—Ç–∞: {sign_info['planet']}\n"
        f"<b>{'–ü–æ–¥—Ä–æ–±–Ω—ã–π' if detailed else '–ö—Ä–∞—Ç–∫–∏–π'} –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {day_text} ({current_date})</b>\n"
        f"{'‚îÄ' * 30}\n\n"
    )

    response = header + horoscope_text

    try:
        await message.edit_text(
            text=response,
            reply_markup=get_horoscope_actions_keyboard(sign, day, detailed),
            parse_mode="HTML"
        )
    except BadRequest as e:
        if "Message is too long" in str(e):
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for i, part in enumerate(parts):
                if i == 0:
                    await message.edit_text(part)
                else:
                    await message.reply_text(part)
            await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_horoscope_actions_keyboard(sign, day, detailed))
        else:
            raise


# –ö–æ–º–∞–Ω–¥—ã
async def horoscope_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        reply_markup = get_zodiac_inline_keyboard("horoscope")
        text = "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"horoscope_today error: {e}")
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_back_to_menu_inline())


async def horoscope_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        reply_markup = get_zodiac_inline_keyboard("horoscope_tomorrow")
        text = "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"horoscope_tomorrow error: {e}")
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_back_to_menu_inline())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∑–æ–¥–∏–∞–∫–∞
async def handle_zodiac_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data

        if ":" not in data:
            await query.message.edit_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=get_back_to_menu_inline())
            return

        parts = data.split(":")

        # üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∑–Ω–∞–∫–∞
        if parts[0] == "horoscope_menu":
            day = parts[1] if len(parts) > 1 else "today"
            markup = get_zodiac_inline_keyboard("horoscope_tomorrow" if day == "tomorrow" else "horoscope")
            text = "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:" if day == "today" else "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:"
            await query.message.edit_text(text, reply_markup=markup)
            return

        # ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        if len(parts) == 4:
            _, sign, day, detailed = parts
            await send_horoscope(query, sign, day, detailed.lower() == "true")
        elif len(parts) == 2:
            prefix, sign = parts
            day = "tomorrow" if prefix == "horoscope_tomorrow" else "today"
            await send_horoscope(query, sign, day, detailed=False)
        else:
            await query.message.edit_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–∞.", reply_markup=get_back_to_menu_inline())

    except Exception as e:
        logger.error(f"handle_zodiac_callback error: {e}")
        await update.effective_message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=get_back_to_menu_inline())
