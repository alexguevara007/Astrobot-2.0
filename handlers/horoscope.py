from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.gpt_horoscope import generate_horoscope
from keyboards import get_zodiac_inline_keyboard, get_back_to_menu_inline

# –ö–∞—Ä—Ç–∞ –∑–Ω–∞–∫–æ–≤
SIGNS = {
    "–æ–≤–µ–Ω": "aries", "—Ç–µ–ª–µ—Ü": "taurus", "–±–ª–∏–∑–Ω–µ—Ü—ã": "gemini",
    "—Ä–∞–∫": "cancer", "–ª–µ–≤": "leo", "–¥–µ–≤–∞": "virgo",
    "–≤–µ—Å—ã": "libra", "—Å–∫–æ—Ä–ø–∏–æ–Ω": "scorpio", "—Å—Ç—Ä–µ–ª–µ—Ü": "sagittarius",
    "–∫–æ–∑–µ—Ä–æ–≥": "capricorn", "–≤–æ–¥–æ–ª–µ–π": "aquarius", "—Ä—ã–±—ã": "pisces"
}

async def send_horoscope(update_or_query, sign: str, day: str, detailed: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–∫–∞
        if sign.lower() not in SIGNS:
            text = "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            if hasattr(update_or_query, 'message'):
                await update_or_query.message.reply_text(text)
            else:
                await update_or_query.edit_message_text(text)
            return

        sign_eng = SIGNS[sign.lower()]
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        loading_text = "üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≥–æ—Ä–æ—Å–∫–æ–ø..."
        if hasattr(update_or_query, 'message'):
            message = await update_or_query.message.reply_text(loading_text)
        else:
            message = await update_or_query.edit_message_text(loading_text)

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
        horoscope_text = generate_horoscope(sign_eng, day=day, detailed=detailed)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        day_text = "—Å–µ–≥–æ–¥–Ω—è" if day == "today" else "–∑–∞–≤—Ç—Ä–∞"
        
        if detailed:
            response = f"‚ôà –ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign.title()} –Ω–∞ {day_text}:\n\n{horoscope_text}"
            # –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ])
        else:
            response = f"‚ôà –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign.title()} –Ω–∞ {day_text}:\n\n{horoscope_text}"
            # –î–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"horoscope:{sign}:{day}:true")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.edit_text(
            text=response,
            reply_markup=keyboard
        )

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        if hasattr(update_or_query, 'message'):
            await update_or_query.message.reply_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )
        else:
            await update_or_query.edit_message_text(
                error_message,
                reply_markup=get_back_to_menu_inline()
            )

async def horoscope_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope")
            )
        else:
            await update.message.reply_text(
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope")
            )
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        if update.callback_query:
            await update.callback_query.message.reply_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def horoscope_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
            )
        else:
            await update.message.reply_text(
                "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
            )
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        if update.callback_query:
            await update.callback_query.message.reply_text(error_message)
        else:
            await update.message.reply_text(error_message)

async def handle_zodiac_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
    try:
        query = update.callback_query
        data = query.data

        if ":" not in data:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )
            return

        parts = data.split(":")
        if len(parts) == 4:  # horoscope:sign:day:detailed
            prefix, sign, day, detailed = parts
            detailed = detailed.lower() == "true"
        else:
            prefix, sign = parts
            day = "today"
            detailed = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø
        
        if prefix == "horoscope":
            await send_horoscope(query, sign, day, detailed)
        elif prefix == "horoscope_tomorrow":
            await send_horoscope(query, sign, "tomorrow", detailed)
        else:
            await query.message.edit_text(
                "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        await update.callback_query.message.reply_text(
            error_message,
            reply_markup=get_back_to_menu_inline()
        )
