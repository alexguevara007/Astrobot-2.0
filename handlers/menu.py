from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import ContextTypes
from telegram.error import BadRequest
import logging

# üì• –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards import (
    get_main_menu_keyboard,
    get_zodiac_inline_keyboard,
    get_back_to_menu_inline
)

# üì• –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤/—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
from services.lunar import get_lunar_text
from handlers.horoscope import horoscope_today, horoscope_tomorrow, handle_zodiac_callback
from handlers.tarot import tarot, tarot3
from handlers.tarot5 import tarot5
from handlers.compatibility import compatibility
from handlers.subscribe import subscribe

logger = logging.getLogger(__name__)

# üè† Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_inline_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåû –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope_menu")],
        [InlineKeyboardButton("üÉè –¢–∞—Ä–æ", callback_data="tarot_menu")],
        [InlineKeyboardButton("üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="moon")],
        [InlineKeyboardButton("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="compatibility")],
        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe")]
    ])


# üîÆ –ú–µ–Ω—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
def get_horoscope_menu_inline():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –°–µ–≥–æ–¥–Ω—è", callback_data="horoscope_today")],
        [InlineKeyboardButton("üåò –ó–∞–≤—Ç—Ä–∞", callback_data="horoscope_tomorrow")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


# üÉè –ú–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
def get_tarot_menu_inline():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è", callback_data="tarot")],
        [InlineKeyboardButton("üîÆ –†–∞—Å–∫–ª–∞–¥ –∏–∑ 3", callback_data="tarot3")],
        [InlineKeyboardButton("üîÆ –†–∞—Å–∫–ª–∞–¥ –∏–∑ 5", callback_data="tarot5")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–µ–Ω—é AstroBot. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        if update.callback_query:
            try:
                await update.callback_query.message.edit_text(
                    text=message,
                    reply_markup=get_main_menu_inline_keyboard()
                )
            except BadRequest:
                await update.callback_query.message.reply_text(
                    text=message,
                    reply_markup=get_main_menu_keyboard()
                )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        err = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        if update.callback_query:
            await update.callback_query.message.reply_text(err)
        else:
            await update.message.reply_text(err)


# üîò Inline –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    try:
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        try:
            await query.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: {e}")

        match data:
            case "horoscope_menu":
                try:
                    await query.message.edit_text(
                        "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞:",
                        reply_markup=get_horoscope_menu_inline()
                    )
                except BadRequest as e:
                    if "message is not modified" in str(e):
                        pass
                    else:
                        await query.message.reply_text(
                            "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–æ—Ä–æ—Å–∫–æ–ø–∞:",
                            reply_markup=get_horoscope_menu_inline()
                        )

            case "tarot_menu":
                try:
                    await query.message.edit_text(
                        "üÉè –¢–∞—Ä–æ-—Ä–∞—Å–∫–ª–∞–¥—ã:",
                        reply_markup=get_tarot_menu_inline()
                    )
                except BadRequest as e:
                    if "message is not modified" not in str(e):
                        await query.message.reply_text(
                            "üÉè –¢–∞—Ä–æ-—Ä–∞—Å–∫–ª–∞–¥—ã:",
                            reply_markup=get_tarot_menu_inline()
                        )

            case "moon":
                text = get_lunar_text()
                try:
                    await query.message.edit_text(
                        f"üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n\n{text}",
                        reply_markup=get_back_to_menu_inline()
                    )
                except BadRequest:
                    await query.message.reply_text(
                        f"üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n\n{text}",
                        reply_markup=get_back_to_menu_inline()
                    )

            case "subscribe":
                await subscribe(update, context)

            case _ if data.startswith("subscribe_"):
                from handlers.subscribe import handle_subscription_callback
                await handle_subscription_callback(update, context)

            case "compatibility" | _ if data.startswith("compatibility_"):
                await compatibility(update, context)

            case "main_menu" | "back_to_menu":
                try:
                    await start(update, context)
                except BadRequest:
                    if update.callback_query:
                        await update.callback_query.message.reply_text(
                            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                            reply_markup=get_main_menu_inline_keyboard()
                        )

            case "horoscope_today":
                try:
                    await query.message.edit_text(
                        "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                        reply_markup=get_zodiac_inline_keyboard("horoscope")
                    )
                except BadRequest:
                    await query.message.reply_text(
                        "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                        reply_markup=get_zodiac_inline_keyboard("horoscope")
                    )

            case "horoscope_tomorrow":
                try:
                    await query.message.edit_text(
                        "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                        reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
                    )
                except BadRequest:
                    await query.message.reply_text(
                        "üåú –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
                        reply_markup=get_zodiac_inline_keyboard("horoscope_tomorrow")
                    )

            case "tarot":
                await tarot(update, context)
            case "tarot3":
                await tarot3(update, context)
            case "tarot5":
                await tarot5(update, context)

            case _ if data.startswith("horoscope:") or data.startswith("horoscope_tomorrow:"):
                await handle_zodiac_callback(update, context)

            case _:
                try:
                    await query.message.edit_text(
                        "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=get_back_to_menu_inline()
                    )
                except BadRequest:
                    await query.message.reply_text(
                        "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                        reply_markup=get_back_to_menu_inline()
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        try:
            await query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_back_to_menu_inline()
            )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")


# üí¨ Reply-–∫–Ω–æ–ø–∫–∏
async def reply_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            return

        text = update.message.text.strip().lower()

        match text:
            case "üåû –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
                await horoscope_today(update, context)
            case "üåú –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
                await horoscope_tomorrow(update, context)
            case "üÉè —Ç–∞—Ä–æ-–∫–∞—Ä—Ç–∞ –¥–Ω—è":
                await tarot(update, context)
            case "üîÆ —Ç–∞—Ä–æ 3 –∫–∞—Ä—Ç—ã":
                await tarot3(update, context)
            case "‚ú® —Ç–∞—Ä–æ 5 –∫–∞—Ä—Ç":
                await tarot5(update, context)
            case "‚ù§Ô∏è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å":
                await compatibility(update, context)
            case "üîî –ø–æ–¥–ø–∏—Å–∫–∞":
                await subscribe(update, context)
            case "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" | "/menu":
                await start(update, context)
            case _:
                await update.message.reply_text(
                    "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /menu –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    reply_markup=get_main_menu_keyboard()
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
