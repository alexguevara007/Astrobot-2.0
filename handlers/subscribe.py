from telegram import Update
from telegram.ext import ContextTypes
from services.database import (
    add_subscription,
    remove_subscription,
    is_subscribed
)
from keyboards import get_zodiac_subscribe_keyboard

SIGNS = [
    "–æ–≤–µ–Ω", "—Ç–µ–ª–µ—Ü", "–±–ª–∏–∑–Ω–µ—Ü—ã", "—Ä–∞–∫", "–ª–µ–≤", "–¥–µ–≤–∞",
    "–≤–µ—Å—ã", "—Å–∫–æ—Ä–ø–∏–æ–Ω", "—Å—Ç—Ä–µ–ª–µ—Ü", "–∫–æ–∑–µ—Ä–æ–≥", "–≤–æ–¥–æ–ª–µ–π", "—Ä—ã–±—ã"
]

# ‚úÖ /subscribe ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ –∑–Ω–∞–∫–∞–º–∏
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "ü™ê –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_zodiac_subscribe_keyboard()
        )

# ‚úÖ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: "subscribe_<sign>"
async def handle_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    sign = data.replace("subscribe_", "").lower()

    if sign not in SIGNS:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.")
        return

    chat_id = query.message.chat_id
    add_subscription(chat_id, sign)

    await query.message.edit_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–Ω–∞–∫ *{sign.capitalize()}* –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        "üì¨ –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø.",
        parse_mode="Markdown"
    )


# ‚ùå /unsubscribe ‚Äî –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    success = remove_subscription(chat_id)

    if success:
        await update.message.reply_text(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø ‚Äî /subscribe"
        )
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


# ‚ÑπÔ∏è /status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
async def subscription_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if is_subscribed(chat_id):
        await update.message.reply_text("üìÆ –£ —Ç–µ–±—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
    else:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")