from telegram import Update, InputMediaPhoto
from telegram.ext import ContextTypes
import json
import random
from keyboards import get_back_to_menu_inline
from services.database import save_prediction

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã
with open("data/tarot_cards.json", encoding="utf-8") as f:
    CARDS = json.load(f)

# –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π 5-–∫–∞—Ä—Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
POSITIONS_5 = [
    "1. –°—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏",
    "2. –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç / –º–µ—à–∞–µ—Ç",
    "3. –ì–ª—É–±–∏–Ω–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è",
    "4. –û–ø—ã—Ç –ø—Ä–æ—à–ª–æ–≥–æ",
    "5. –í–æ–∑–º–æ–∂–Ω—ã–π –∏—Å—Ö–æ–¥"
]

def draw_card(used_names: set) -> dict:
    while True:
        card = random.choice(CARDS)
        if card["name"] not in used_names:
            used_names.add(card["name"])
            is_reversed = random.choice([True, False])
            name = card["name"] + (" (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)" if is_reversed else "")
            meaning = card["reversed_meaning"] if is_reversed else card["meaning"]
            return {
                "name": name,
                "meaning": meaning,
                "image": card["image"]
            }

def split_text(text: str, limit: int = 1000) -> list:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã"""
    if len(text) <= limit:
        return [text]
    
    parts = []
    current_part = ""
    
    for paragraph in text.split('\n\n'):
        if len(current_part) + len(paragraph) + 2 <= limit:
            current_part += (paragraph + '\n\n')
        else:
            if current_part:
                parts.append(current_part.strip())
            current_part = paragraph + '\n\n'
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts

async def tarot5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        used = set()
        cards = []
        all_images = []
        message = "üÉè –ü—è—Ç–∏–∫–∞—Ä—Ç–æ—á–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ\n\n"

        # –í—ã—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        for i in range(5):
            card = draw_card(used)
            cards.append(card)
            all_images.append(card['image'])
            message += f"{POSITIONS_5[i]}\n‚Üí {card['name']}\n{card['meaning']}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ AI
        message += "üí¨ –ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_prediction(chat_id, message, "tarot5")

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        text_parts = split_text(message)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
        if update.callback_query:
            send_media = update.callback_query.message.reply_media_group
            send_text = update.callback_query.message.reply_text
        else:
            send_media = update.message.reply_media_group
            send_text = update.message.reply_text

        # MediaGroup –¥–ª—è –∫–∞—Ä—Ç ‚Äî 4 –±–µ–∑ caption, –ø–æ—Å–ª–µ–¥–Ω—è—è ‚Äî —Å caption
        media_group = [
            InputMediaPhoto(media=img) for img in all_images[:-1]
        ]
        media_group.append(
            InputMediaPhoto(
                media=all_images[-1],
                caption=text_parts[0]
            )
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç
        await send_media(media=media_group)

        # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
        for part in text_parts[1:]:
            await send_text(part)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        await send_text(
            "üÉè",
            reply_markup=get_back_to_menu_inline()
        )

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        if update.callback_query:
            await update.callback_query.message.reply_text(error_message)
        else:
            await update.message.reply_text(error_message)