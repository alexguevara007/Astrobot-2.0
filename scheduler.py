import asyncio
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import logging
from services.database import get_all_subscriptions
from services.gpt_horoscope import load_cache, clear_old_cache

logger = logging.getLogger(__name__)

def setup_scheduler(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        scheduler = BackgroundScheduler(timezone="Europe/Moscow")

        @scheduler.scheduled_job("cron", hour=10)  # –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ 10:00
        def send_daily_horoscopes():
            """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≤ 10:00"""
            logger.info("üîî –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤...")

            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏–∑ –∫—ç—à–∞
                cache = load_cache()
                users = get_all_subscriptions()

                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
                asyncio.run(send_messages(application, users, cache))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

        @scheduler.scheduled_job("cron", hour=0, minute=1)
        def clear_cache_job():
            """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞"""
            try:
                clear_old_cache()
                logger.info("‚úÖ –ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        logger.info("   ‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤: 10:00")
        logger.info("   ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: 00:01")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

async def send_messages(app, users, cache):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    current_date = str(datetime.today().date())
    sent_count = 0
    error_count = 0

    for chat_id, sign in users:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            sign_lower = sign.lower()
            user_data = cache.get(sign_lower, {}).get("brief_" + sign_lower + "_today")

            if user_data and user_data.get("date") == current_date:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üåü –í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({current_date})\n"
                    f"–ó–Ω–∞–∫: {sign.capitalize()}\n"
                    f"{'_' * 30}\n\n"
                    f"{user_data['text']}"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await app.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode="HTML"
                )
                sent_count += 1
                logger.info(f"‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {chat_id} ({sign})")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ –∫—ç—à–µ –¥–ª—è {sign}")
                error_count += 1

        except Exception as e:
            error_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id} ({sign}): {e}")

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"–û—à–∏–±–æ–∫: {error_count}"
    )
