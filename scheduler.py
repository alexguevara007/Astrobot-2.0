import asyncio
from apscheduler.schedulers.background import BackgroundScheduler
from services.database import get_all_subscriptions
from services.gpt_horoscope import load_cache
from datetime import datetime

def setup_scheduler(application):
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –∑–æ–Ω—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    @scheduler.scheduled_job("cron", hour=8)
    def send_horoscopes():
        print(f"[{datetime.now()}] üîî –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏–∑ –∫—ç—à–∞
        cache = load_cache()
        users = get_all_subscriptions()

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
        asyncio.run(send_messages(application, users, cache))

    scheduler.start()


async def send_messages(app, users, cache):
    for chat_id, sign in users:
        user_data = cache.get(sign.lower(), {}).get("today")
        full_date = str(datetime.today().date())

        if user_data and user_data.get("date") == full_date:
            text = f"üîÆ *–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è {sign.capitalize()}*\n\n{user_data['text']}"

            try:
                await app.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {chat_id} ({sign})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É {chat_id}: {e}")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ ‚Üí –ù–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ –∫—ç—à–µ –¥–ª—è {sign}")