import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler

from services.database import get_all_subscriptions
from services.cache_utils import load_cache, clear_old_cache

logger = logging.getLogger(__name__)

def setup_scheduler(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        scheduler = BackgroundScheduler(timezone="Europe/Moscow")

        @scheduler.scheduled_job("cron", hour=10, minute=0)
        def send_daily_horoscopes():
            """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≤ 10:00"""
            logger.info("üîî –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤...")

            try:
                cache = load_cache()
                users = get_all_subscriptions()

                # ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –í–ù–£–¢–†–ò loop'–∞ –±–æ—Ç–∞
                application.create_task(send_messages(application, users, cache))

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤: {e}")

        @scheduler.scheduled_job("cron", hour=0, minute=1)
        def clear_cache_job():
            """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01"""
            try:
                clear_old_cache()
                logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –∫—ç—à –æ—á–∏—â–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")

        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        logger.info("üìÖ –ó–∞–¥–∞—á–∏:")
        logger.info("   ‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00")
        logger.info("   ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:01")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ASYNC SEND MESSAGES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def send_messages(application, users, cache):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    current_date = str(datetime.today().date())
    sent_count = 0
    error_count = 0

    for chat_id, sign in users:
        try:
            sign_lower = sign.lower()
            key = f"brief_{sign_lower}_today"

            sign_cache = cache.get(sign_lower, {})
            user_data = sign_cache.get(key)

            if user_data and user_data.get("date") == current_date:
                message = (
                    f"üåü <b>–í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b> ({current_date})\n"
                    f"–ó–Ω–∞–∫: {sign.capitalize()}\n"
                    f"{'‚îÄ' * 30}\n\n"
                    f"{user_data['text']}"
                )
                await application.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode="HTML"
                )
                sent_count += 1
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: chat_id={chat_id}, sign={sign}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –¥–ª—è: {sign} / {chat_id}")
                error_count += 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: chat_id={chat_id}, sign={sign} ‚Äî {e}")
            error_count += 1

    logger.info(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ {current_date}:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"üì© –£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
        f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {error_count}"
    )
