"""
AstroBot ‚Äî Telegram –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞–º, –¢–∞—Ä–æ –∏ –õ—É–Ω–µ üåô
"""

import os
import time
import logging
from dotenv import load_dotenv
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, Defaults, filters
)
from telegram.constants import ParseMode
from telegram.error import TelegramError
from aiohttp import web

from handlers.menu import start, button_handler, reply_command_handler
from handlers.horoscope import horoscope_today, horoscope_tomorrow
from handlers.subscribe import subscribe, unsubscribe, subscription_status
from handlers.moon import moon
from handlers.tarot import tarot, tarot3
from handlers.tarot5 import tarot5
from handlers.compatibility import compatibility
from services.database import init_db
from scheduler import setup_scheduler

# === üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8080))
RENDER_URL = "https://astrobot-2-0.onrender.com"

if not BOT_TOKEN:
    logging.critical("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    raise SystemExit("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã—Ö–æ–¥.")

# === üìù –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    try:
        update = await request.json()
        logger.info("==================== –ù–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ====================")
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if 'message' in update:
            message = update['message']
            logger.info(f"–û—Ç: {message.get('from', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"–¢–µ–∫—Å—Ç: {message.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
            logger.info(f"Chat ID: {message.get('chat', {}).get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
        elif 'callback_query' in update:
            callback = update['callback_query']
            logger.info(f"Callback data: {callback.get('data', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            logger.info(f"–û—Ç: {callback.get('from', {}).get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        await application.process_update(update)
        logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        return web.Response()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        return web.Response(status=500)

async def health_check(request):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    try:
        webhook_info = await application.bot.get_webhook_info()
        bot_info = await application.bot.get_me()
        return web.json_response({
            "status": "running",
            "bot_username": bot_info.username,
            "webhook_url": webhook_info.url,
            "webhook_pending_update_count": webhook_info.pending_update_count,
            "timestamp": time.time(),
            "service": "AstroBot",
            "version": "2.0"
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ health_check: {e}")
        return web.json_response({"status": "error", "error": str(e)}, status=500)

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    global application
    
    try:
        # üìÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (HTML)
        defaults = Defaults(parse_mode=ParseMode.HTML)

        # ü§ñ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).defaults(defaults).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
        await application.initialize()
        await application.start()

        # === üìå –ö–æ–º–∞–Ω–¥—ã ===
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", start))
        application.add_handler(CommandHandler("help", start))

        application.add_handler(CommandHandler("subscribe", subscribe))
        application.add_handler(CommandHandler("unsubscribe", unsubscribe))
        application.add_handler(CommandHandler("status", subscription_status))

        application.add_handler(CommandHandler("horoscope", horoscope_today))
        application.add_handler(CommandHandler("tomorrow", horoscope_tomorrow))
        application.add_handler(CommandHandler("moon", moon))

        application.add_handler(CommandHandler("tarot", tarot))
        application.add_handler(CommandHandler("tarot3", tarot3))
        application.add_handler(CommandHandler("tarot5", tarot5))
        application.add_handler(CommandHandler("compatibility", compatibility))

        # ‚úÖ Callback –∫–Ω–æ–ø–∫–∏
        application.add_handler(CallbackQueryHandler(button_handler))

        # ‚úÖ –¢–µ–∫—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Reply-–∫–Ω–æ–ø–∫–∏)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_command_handler))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        bot_info = await application.bot.get_me()
        logger.info(f"=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ===")
        logger.info(f"–ò–º—è: {bot_info.first_name}")
        logger.info(f"Username: @{bot_info.username}")
        logger.info(f"ID: {bot_info.id}")

        # ‚ñ∂Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        webhook_path = f"/webhook/{BOT_TOKEN}"
        webhook_url = f"{RENDER_URL}{webhook_path}"
        
        await application.bot.delete_webhook()
        await application.bot.set_webhook(webhook_url)
        
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook ===")
        logger.info(f"URL: {webhook_info.url}")
        logger.info(f"Pending updates: {webhook_info.pending_update_count}")

        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
        raise

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await setup_bot()
        
        app = web.Application()
        webhook_path = f"/webhook/{BOT_TOKEN}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É—Ç–µ–π
        app.router.add_get("/", health_check)
        app.router.add_post(webhook_path, webhook_handler)
        
        logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return app
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")
        raise

if __name__ == "__main__":
    try:
        web.run_app(main(), port=PORT)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
